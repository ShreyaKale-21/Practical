[5]:import pandas as pd
import numpy as np
[6]:  dict1={"Roll_No":[1,2,3,4,5]," Name":["Amol","Dipak","Shreya","Krisha","Pooja"], "Maths_marks":[60,70,80,90,np.nan], "English_marks":[70,80,90,np.nan,60], 
  "Science_marks":[80,90,np.nan,60,70], "History_marks":[90,np.nan,60,70,80],"Geography_marks":[np.nan,60,70,80,90]}
[7]: df1=pd.DataFrame(dict1)
[8]: df1.isnull()
[9]: df1.isnull().sum()
[10]: df1.info()
[11]: df1.fillna(0,inplace=True)
    df1
[12]: df1=pd.DataFrame(dict1)
    df1
[22]: dict1={"Roll_No":[1,2,3,4,5],"Name":
["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":[np.
nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[13]: # filling a null values using fillna()
df1["Maths_marks"].fillna(45, inplace = True)
df1["English_marks"].fillna(55, inplace = True)
df1["Science_marks"].fillna(65, inplace = True)
df1["History_marks"].fillna(75, inplace = True)
df1["Geography_marks"].fillna(85, inplace = True)
[14]: df1
[15]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
↪nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
↪nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":[np.
↪nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[33]: # filling a null values using fillna() as mean of colum
df1["Maths_marks"].fillna(int(df1["Maths_marks"].mean()), inplace=True)
[34]: df1
[27]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
↪nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
↪nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":[np.
↪nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[17]: df1.interpolate(method ='linear', limit_direction ='forward')
[18]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":
↪[60,70,80,93,75],"English_marks":[70,80,40,np.nan,50],"Science_marks":
↪[80,91,np.nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":
↪[np.nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[26]: df1.dropna()
[19]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
↪nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
↪nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":[np.
↪nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[28]: # using dropna() function
df1.dropna(how = 'all',inplace=True)
[20]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
↪nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
↪nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":[np.
↪nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[21]: # using dropna() function
df1.dropna(axis = 1)
[31]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
↪nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
↪nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":
↪[60,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1
[22]: # making new data frame with dropped NA values
df2 = df1.dropna(axis = 0, how ='any')
[33]: df2
[23]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":[60,70,80,93,np.
↪nan],"English_marks":[70,80,40,np.nan,50],"Science_marks":[80,91,np.
↪nan,65,70],"History_marks":[76,np.nan,68,70,80],"Geography_marks":[np.
↪nan,62,70,80,90]}
df1=pd.DataFrame(dict1)
df1

[25]: import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
dataset = [12,35,40,60,70,80,25,41,20,30,145,55,68,75,56,150]
sorted(dataset)
quantile1, quantile3 = np.percentile(dataset, [25,75])
print(quantile1, quantile3)
iqr_value = (quantile3 - quantile1)
print(iqr_value)
lower_bound_value = quantile1 - (1.5*iqr_value)
upper_bound_value = quantile3 + (1.5*iqr_value)
print(lower_bound_value, upper_bound_value)
#find outliers
outlier =[]
for x in dataset:
if ((x> upper_bound_value) or (x<lower_bound_value)):
outlier.append(x)

print(' outlier in the dataset is', outlier)

[32]: import seaborn as sns
sns.boxplot(dataset)
[30]: dict1={"Roll_No":[1,2,3,4,5],"Name":
↪["Amol","Dipak","Shreya","Krisha","Pooja"],"Maths_marks":
↪[60,70,80,90,50],"seminar":[45,100,45,50,120],"History_marks":
↪[90,60,60,70,80],}
[86]: df1=pd.DataFrame(dict1)
[31]: result = df1.transform(func = ['sqrt', 'exp'])
result
[88]: # Min-Max Normalization
df1 = data.drop('species', axis=1)
df_norm = (df-df.min())/(df.max()-df.min())
df_norm = pd.concat((df_norm, data.species), 1)
print("Scaled Dataset Using Pandas")
df_norm.head()
[89]: df1.head()

/////////////////////outliners
[31]: # Importing
import sklearn
from sklearn.datasets import load_boston
import pandas as pd
import matplotlib.pyplot as plt
# Load the dataset
bos_hou = load_boston()
# Create the dataframe
column_name = bos_hou.feature_names
df_boston = pd.DataFrame(bos_hou.data)
df_boston.columns = column_name
df_boston.head()
[32]: # Box Plot
import seaborn as sns
sns.boxplot(df_boston['DIS'])
[5]: # Position of the Outlier
print(np.where(df_boston['DIS']>10))
[6]: df_boston.info()
[7]: #////////////////// Scatter plot
fig, ax = plt.subplots(figsize = (18,10))
ax.scatter(df_boston['INDUS'], df_boston['TAX'])
# x-axis label
ax.set_xlabel('(Proportion non-retail business acres)/(town)')
# y-axis label
ax.set_ylabel('(Full-value property-tax rate)/( $10,000)')
plt.show()
[8]: # Position of the Outlier
print(np.where((df_boston['INDUS']>20) & (df_boston['TAX']>600)))
[9]: #/////////// Z score
from scipy import stats
import numpy as np
z = np.abs(stats.zscore(df_boston['DIS']))
print(z)
[10]: threshold = 3
# Position of the outlier
print(np.where(z > 3))

/////////////////////////////////////Transformation
[21]: # importing pandas as pd
import pandas as pd
# Creating the DataFrame
df = pd.DataFrame({"A":[12, 4, 5, None, 1],

"B":[7, 2, 54, 3, None],
"C":[20, 16, 11, 3, 8],
"D":[14, 3, None, 2, 6]})

# Create the index
index_ = ['Row_1', 'Row_2', 'Row_3', 'Row_4', 'Row_5']
# Set the index
df.index = index_
# Print the DataFrame
print(df)
[23]: # pass a list of functions
result = df.transform(func = ['sqrt', 'exp'])
result


